#!/usr/bin/python3
# -*- python -*-

from __future__ import print_function

import sys
sys.path += [ "/usr/share/unicsy/lib", "../lib" ]

import os
import time
import hardware
import watchdog
import sys
import select
import termios
import tty
import time
from datetime import datetime

class Man:
    def perc(m, p):
        p = int(p/3)
        return '#'*p + '.'*(34-p)

    def charging_enabled(m, val):
        m.bat.write(m.bat.battery + "/charging_enabled", val)

    def battery_details(m):
        bat = m.bat
        # current_avg: Librem 5 displays > 0 for discharge. should be other way around iirc.
        print("%.3f A" % (bat.current/1000), end='')
        temp = m.bat.read_int(m.bat.battery + "/temp") / 10.
        print(" %.1f C" % temp, end='')

    def one_step(m, first):
        now = datetime.now()
        print(now.strftime("%H:%M "), end='')

        bat = m.bat
        bat.run()
        s = bat.summary()

        if True:
            percent = m.bat.read_int(m.bat.battery + "/capacity")
            print("%.0f%% |%s " % (percent, m.perc(percent)), end='')
            print("%.2f " % bat.volt, end='')
            print("i %.2f %.0f%% " % (bat.volt3, bat.perc3), end='')

            # Display currents, etc:
            m.battery_details()

            if percent > 80 or (first and percent > 60):
                m.charging_enabled("0")
            if percent < 60:
                m.charging_enabled("1")
        print()

    def run(m):
        m.bat = hardware.hw.battery
        m.one_step(True)
        while 1:
            m.one_step(False)
            sys.stdout.flush()
            time.sleep(1)

m = Man()
m.run()
