#!/usr/bin/python3
# -*- python -*-

from __future__ import print_function

import sys
sys.path += [ "/usr/share/unicsy/lib", "../lib" ]

import os
import time
import hardware
import watchdog
import sys
import select
import termios
import tty
import time

def get_char(t):
    fd = sys.stdin.fileno()
    old_settings = termios.tcgetattr(fd)
    try:
        tty.setraw(fd)
        i, o, e = select.select([sys.stdin], [], [], t)
        if i:
            char = sys.stdin.read(1)
        else:
            char = None
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
    return char

class State:
    def __init__(m, bat):
        m.volt = bat.volt
        m.perc = bat.perc
        m.volt3 = bat.volt3
        m.perc3 = bat.perc3
        m.charge_counter = bat.charge_counter
        m.time = time.time()
        m.status = bat.status

class Man:
    def esc(m, s):
        print(chr(27)+s)

    def cls(m):
        m.esc("c")

    def disp(m, v):
        if v in m.states:
            old = m.states[v]
            dt = time.time() - old.time
            dc = (m.bat.charge_counter - old.charge_counter) / 1000
            print(v, "%.1f min ago" % (dt/60),
                  "%.6f Ah" % dc,
                  "%.6f A" % ((dc * 3600.)/dt) )

    def perc(m, p):
        p = int(p/3)
        return '#'*p + '.'*(34-p)

    def one_step(m):
        bat = m.bat
        bat.run()
        s = bat.summary()
        s2 = bat.handle_protect()
        if s2: s = s2

        if m.last_counter is None:
            aacur = 0
        else:
            # in mAh
            aacur = (m.last_counter - bat.charge_counter) / (m.step/3600.)
            # WTF? Is that right?
        m.last_counter = bat.charge_counter

        if not "startup" in m.states:
            m.states["startup"] = State(bat)
        if "last" in m.states:
            ls = m.states["last"].status
            if bat.status != ls:
                m.states[ls + "-" + bat.status] = State(bat)
            def cvt(x): return int(x*10)
            p2 = cvt(bat.volt)
            p1 = cvt(m.states["last"].volt)
            #print("---", p1, p2)
            if p1 != p2:
                m.states["%s%d-%d" % (bat.status, p1, p2)] = State(bat)

        if False:
            print("utime=%.3f"% time.time(),
                  "batvolt=%.3f" % bat.volt,
                  "bativolt=%.3f" % bat.volt3,
                  "batperc=%.1f" % bat.perc,
                  "batiperc=%.1f" % bat.perc3,
                  "batcur=%.5f" % bat.current,
                  "batacur=%.5f" % bat.current_avg,
                  "bataacur=%f" % aacur,
                  "charge=%f" % bat.charge_counter, file=bat_log)
        if True:
            m.capacity = 1785
            if bat.battery_empty and bat.battery_full:
                m.capacity = bat.battery_full-bat.battery_empty

            print("bat %.2f V %.0f %% |%s" % (bat.volt, bat.perc, m.perc(bat.perc)))
            print("int %.2f V %.0f %% |%s" % (bat.volt3, bat.perc3, m.perc(bat.perc3)))

            # This is attempt to get useful data from charge counter
            v = "Full-Discharging"
            if v in m.states:
                old = m.states[v]
                # Full -- 75% at 4.1V
                base_charge = old.charge_counter
            else:
                base_charge = 496.266 + 157.13 + 67.47
            dc = (m.bat.charge_counter - base_charge) / 1000
            cap = 1.1 # Assuming 900mAh from 71% to zero.
            p = 70 + 70 * (dc / cap)
            if p < 0: p = 0
            if p > 100: p = 100
            print("%2.5f Ah %.0f %% |%s" % (dc, p, m.perc(p)))

            # 
            print()
            print("now %.2f A %f Ah" % (bat.current_avg/1000, bat.charge_counter/1000))

            # These are attempts to time how long various charge thresholds are reached
            print()
            print("st %s b_st %s" % (bat.status, bat.b_status))
            m.disp("Full-Discharging")
            m.disp("Charging-Discharging")
            m.disp("Discharging-Charging")
            m.disp("Charging-Full")
            m.disp("startup")
            m.disp("Discharging40-39")
            m.disp("Discharging39-38")
            m.disp("Discharging38-37")
            m.disp("Discharging37-36")
            m.disp("Discharging36-35")
            m.disp("Discharging35-34")
            m.disp("Discharging34-33")
            m.disp("Charging35-36")
            m.disp("Charging36-37")
            m.disp("Charging37-38")
            m.disp("Charging38-39")
            m.disp("Charging39-40")
            #print(m.states)

        if False:
            print("empty %s 3.5V %s 4V %s full %s |" % (bat.fmt(bat.battery_empty), bat.fmt(bat.battery_35V), bat.fmt(bat.battery_4V), bat.fmt(bat.battery_full)), file=sys.stderr)

            print(bat.guess_charge(bat.battery_empty, 0, m.capacity) + " to empty", file=sys.stderr)
            print(bat.guess_charge(bat.battery_35V, bat.percent(3.5) / 100., m.capacity) + " to 3.5V", file=sys.stderr)
            print(bat.guess_charge(bat.battery_4V, bat.percent(4.) / 100., m.capacity) + " or more -- to 4V", file=sys.stderr)
            print(bat.guess_charge(bat.battery_full, 1., m.capacity) + " to full", file=sys.stderr)

        m.states["last"] = State(bat)

    def set_charge(m, amp, volt):
        p_battery = m.bat.battery
        p_charger = m.bat.charger
        volt *= 1000
        amp *= 1000
        volt = int(volt)
        amp = int(amp)
        
        os.system("echo %d | sudo tee %s/constant_charge_voltage" % (volt, p_charger))
        os.system("echo %d | sudo tee %s/input_current_limit" % (amp, p_charger))
        
    def handle_cmd(m, c):
        if not c:
            return
        if ord(c) == 3:
            exit(0)
        if c == '`': m.set_charge(200, 3800)   # 0.1C charge to 50%
        if c == '1': m.set_charge(200, 3900)   # 0.1C to 60%
        if c == '2': m.set_charge(500, 3900)   # 0.4C to 60%
        if c == '3': m.set_charge(500, 4000)   # 0.4C to 75%
        if c == '4': m.set_charge(500, 4100)   # 0.4C to 85%
        if c == '8': m.set_charge(500, 4200)   # 0.4C to full
        if c == '9': m.set_charge(1900, 4200)  # 1C to full
        if c == '-':
            if hardware.hw.d4:
                m.set_charge(1900, 4349)
            else:
                print("Boost not available outside d4")
        if c == 'q': sys.exit(0)

    def run(m):
        m.bat = hardware.hw.battery
        m.last_counter = None
        m.states = {}
        m.step = 60
        while 1:
            m.cls()
            m.one_step()
            sys.stdout.flush()
            c = get_char(m.step)
            m.handle_cmd(c)

m = Man()
m.run()
